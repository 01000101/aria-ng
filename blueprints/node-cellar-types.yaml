
imports:
  - tosca-simple-profile-1.0/tosca-simple-profile-1.0.yaml
  - tosca-simple-nfv-1.0/tosca-simple-nfv-1.0.yaml

#
# Nodes
#

node_types:

  Application:
    description: |
      A generic application.
    properties:
      port:
        description: The user port.
        type: tosca.datatypes.network.PortDef
    requirements:
      - host:
          capability: CanHost
          relationship: InstalledIn
      # short form:
      #- host: tosca.capabilities.Container

  WebApplication:
    description: |
      A generic web application.
    derived_from: Application
    properties:
      port:
        type: tosca.datatypes.network.PortDef
        default: 8080
      root_url:
        description: The root URL.
        type: string
        default: /
      locale:
        description: The locale (optional).
        type: string
        required: false

  NodeJsWebApplication:
    description: |
      A Node.js-based web application.
    derived_from: WebApplication
    properties:
      test1:
        type: map
        entry_schema: integer
      test2:
        type: version
      test3:
        type: scalar-unit.size
      test4:
        type: scalar-unit.time
      test5:
        type: scalar-unit.frequency
    artifacts:
      node_js:
        description: |
          The Node.js application package.
        type: ZipApplicationPackage
        file: https://nodejs.org/dist/v4.4.7/node-v4.4.7-linux-x64.tar.xz
        deploy_path: /opt/node-js

  DatabaseApplication:
    description: |
      A generic database application.
    derived_from: Application
    capabilities:
      data: CanServeData

  MongoDbApplication:
    description: |
      MongoDB database application.
    derived_from: DatabaseApplication
    properties:
      port:
        type: tosca.datatypes.network.PortDef
        default: 27017
    capabilities:
      data:
        type: CanServeData
        properties:
          class:
            type: string
            default: object

  Host:
    description: |
      A host.
    properties:
      ip_address:
        description: The IP address.
        type: string # when overriding a property, you can't change the type
    capabilities:
      host:
        type: CanHost
        occurrences: 10 # for testing only

#
# Capabilities
#

capability_types:
  
  CanServeData:
    description: |
      The capability to serve data.
    properties:
      class:
        description: \'relational\' (SQL) or \'object\' (No-SQL)
        type: string
    valid_source_types: # node types
      - Host
  
  CanHost:
    description: |
      The capability to host applications.
    derived_from: tosca.capabilities.Container 
    valid_source_types:
      - Host

#
# Relationships
#

relationship_types:

  Base:
    derived_from: tosca.relationships.HostedOn
    interfaces:
      lifecycle:
        type: Lifecycle
        inputs:
          bad1:
            type: string
            required: false
        create:
          inputs:
            bad2:
              type: string
              required: false

  InstalledIn:
    #derived_from: tosca.relationships.HostedOn
    derived_from: Base
    description: |
      Relationship between an application and its host.
    valid_target_types: # capability types
      - CanHost
    properties:
      artifact_name:
        description: The name of the artifact in the node to install.
        type: string
    interfaces:
      lifecycle:
        type: Lifecycle # type is optional, for inheritence, but we can just define everything here
        inputs:
          credential:
            description: The credential for all operations.
            type: tosca.datatypes.Credential
        create:
          inputs:
            timeout:
              description: The timeout in seconds for the create operation.
              type: integer
            bad2:
              type: string

#
# Groups
#

group_types:

  SecuredHosts:
    description: |
      Group of hosts that are allowed to communicate with each other.
    properties:
      name:
        description: The name of the group (for firewall configuration).
        type: string
    members: # node types
      - Host
    interfaces:
      lifecycle:
        type: Lifecycle # type is optional, we can just define everything here
        inputs:
          bad1:
            type: string
            required: false
        create:
          inputs:
            bad2:
              type: string
              required: false

#
# Policies
#

policy_types:

  Securable:
    description: |
      Policy to secure hosts or groups of hosts.
    targets: # node types or group types
      - Host
      - SecuredHosts

#
# Artifacts
#

artifact_types:

  ApplicationPackage:
    description: |
      A generic application package.

  ZipApplicationPackage:
    description: |
      An application package in a zip.
    derived_from: ApplicationPackage
    file_ext:
      - zip
      - tar.gz
      - tar.xz

#
# Interfaces
#

interface_types:

  Logging:
    derived_from: tosca.interfaces.node.lifecycle.Standard
    inputs:
      debug_logger:
        type: string
        default: unknown
      bad1:
        type: string
    create:
      inputs:
        bad2:
          type: string

  Lifecycle:
    description: |
      Lifecycle management interface.
    #derived_from: tosca.interfaces.node.lifecycle.Standard
    derived_from: Logging
    inputs:
      debug_logger:
        type: string
        default: lifecycle
