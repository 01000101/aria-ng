tosca_definitions_version: tosca_simple_yaml_1_0

description: |
  Node Cellar TOSCA blueprint.

imports:
  - node-cellar-types.yaml # there is also a long form for imports

repositories:

  node_cellar_repository:
    description: |
      The repository for the Node Cellar application and its dependencies.
    url: https://github.com/cloudify-cosmo/nodecellar/archive

topology_template:

#
# Nodes
#

  node_templates:
  
    # Application nodes

    node_cellar:
      description: |
        Node Cellar Node.js web application.
      type: NodeJsWebApplication
      properties:
        port: 8081
        root_url: /node-cellar
        test1:
          test1: hi
          test2: ho
        test2: 3.1
        test3: 5 TiB
        test4: 1.2 d
        test5: 1.2 GHz
        test6: '2001-12-14t21:59:43.10-05:00'
      requirements:
        - host:
            capability: CanHost # we can put a type, or a whole capability definition here
            relationship: node_cellar_installed_in # we can use either a relationship template or a relationship type here
            node: Host # we can use either a node template or a node type
        - data:
            capability: CanServeData
      artifacts:
        node_cellar:
          description: |
            The Node Cellar application package.
          type: ZipApplicationPackage
          file: master.tar.gz
          repository: node_cellar_repository
          deploy_path: /opt/node-cellar
    
    mongodb:
      description: |
        MongoDB database application.
      type: MongoDbApplication
      requirements:
        - host: data_host # short form: node template or node type

    # Host nodes

    application_host:
      description: |
        Host for applications.
      type: Host
      properties:
        ip_address: 192.168.1.100

    data_host:
      description: |
        Host for databases.
      type: Host
      properties:
        ip_address: 192.168.1.101

#
# Relationships
#

  relationship_templates:
  
    node_cellar_installed_in:
      description: |
        Node Cellar installation relationship.
      type: InstalledIn
      properties:
        artifact_name: node_cellar
      interfaces:
        lifecycle:
          #type: Lifecycle # if specified, must be the same as in type
          inputs:
            credential:
              token_type: password
              user: root
              token: admin123
          create:
            inputs:
              timeout: 60
            implementation:
              primary: install_node_cellar.sh
              dependencies:
                - os_utils.sh
                - packaging_utils.sh

#
# Groups
#

  groups:
   
    secured:
      type: SecuredHosts
      properties:
        name: node_cellar
      members: # node templates
        - application_host
        - data_host
      interfaces:
        lifecycle:
          create:
            implementation: create_secure_hosts_group.sh

#
# Policies
#

  policies:
  
    securable:
      type: Securable
      targets: # node templates or groups
        - secured
